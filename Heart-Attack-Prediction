{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8386317,"sourceType":"datasetVersion","datasetId":3786485}],"dockerImageVersionId":31040,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"!pip install -U scikit-learn==1.2.2 imbalanced-learn==0.10.1 --quiet\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-04T12:56:21.935239Z","iopub.execute_input":"2025-07-04T12:56:21.935442Z","iopub.status.idle":"2025-07-04T12:56:25.951405Z","shell.execute_reply.started":"2025-07-04T12:56:21.935422Z","shell.execute_reply":"2025-07-04T12:56:25.950475Z"}},"outputs":[],"execution_count":1},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix, ConfusionMatrixDisplay\n\nfrom imblearn.over_sampling import SMOTE\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-04T12:56:25.952505Z","iopub.execute_input":"2025-07-04T12:56:25.952794Z","iopub.status.idle":"2025-07-04T12:56:27.170012Z","shell.execute_reply.started":"2025-07-04T12:56:25.952766Z","shell.execute_reply":"2025-07-04T12:56:27.169295Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/heart-attack-prediction-dataset/heart_attack_prediction_dataset.csv')\nprint(\"Initial shape:\", df.shape)\ndf.head()\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-07-04T12:56:27.170991Z","iopub.execute_input":"2025-07-04T12:56:27.171396Z","iopub.status.idle":"2025-07-04T12:56:27.250404Z","shell.execute_reply.started":"2025-07-04T12:56:27.171374Z","shell.execute_reply":"2025-07-04T12:56:27.249507Z"}},"outputs":[{"name":"stdout","text":"Initial shape: (8763, 26)\n","output_type":"stream"},{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"  Patient ID  Age     Sex  Cholesterol Blood Pressure  Heart Rate  Diabetes  \\\n0    BMW7812   67    Male          208         158/88          72         0   \n1    CZE1114   21    Male          389         165/93          98         1   \n2    BNI9906   21  Female          324         174/99          72         1   \n3    JLN3497   84    Male          383        163/100          73         1   \n4    GFO8847   66    Male          318          91/88          93         1   \n\n   Family History  Smoking  Obesity  ...  Sedentary Hours Per Day  Income  \\\n0               0        1        0  ...                 6.615001  261404   \n1               1        1        1  ...                 4.963459  285768   \n2               0        0        0  ...                 9.463426  235282   \n3               1        1        0  ...                 7.648981  125640   \n4               1        1        1  ...                 1.514821  160555   \n\n         BMI  Triglycerides  Physical Activity Days Per Week  \\\n0  31.251233            286                                0   \n1  27.194973            235                                1   \n2  28.176571            587                                4   \n3  36.464704            378                                3   \n4  21.809144            231                                1   \n\n   Sleep Hours Per Day    Country      Continent           Hemisphere  \\\n0                    6  Argentina  South America  Southern Hemisphere   \n1                    7     Canada  North America  Northern Hemisphere   \n2                    4     France         Europe  Northern Hemisphere   \n3                    4     Canada  North America  Northern Hemisphere   \n4                    5   Thailand           Asia  Northern Hemisphere   \n\n   Heart Attack Risk  \n0                  0  \n1                  0  \n2                  0  \n3                  0  \n4                  0  \n\n[5 rows x 26 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Patient ID</th>\n      <th>Age</th>\n      <th>Sex</th>\n      <th>Cholesterol</th>\n      <th>Blood Pressure</th>\n      <th>Heart Rate</th>\n      <th>Diabetes</th>\n      <th>Family History</th>\n      <th>Smoking</th>\n      <th>Obesity</th>\n      <th>...</th>\n      <th>Sedentary Hours Per Day</th>\n      <th>Income</th>\n      <th>BMI</th>\n      <th>Triglycerides</th>\n      <th>Physical Activity Days Per Week</th>\n      <th>Sleep Hours Per Day</th>\n      <th>Country</th>\n      <th>Continent</th>\n      <th>Hemisphere</th>\n      <th>Heart Attack Risk</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>BMW7812</td>\n      <td>67</td>\n      <td>Male</td>\n      <td>208</td>\n      <td>158/88</td>\n      <td>72</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>...</td>\n      <td>6.615001</td>\n      <td>261404</td>\n      <td>31.251233</td>\n      <td>286</td>\n      <td>0</td>\n      <td>6</td>\n      <td>Argentina</td>\n      <td>South America</td>\n      <td>Southern Hemisphere</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>CZE1114</td>\n      <td>21</td>\n      <td>Male</td>\n      <td>389</td>\n      <td>165/93</td>\n      <td>98</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>...</td>\n      <td>4.963459</td>\n      <td>285768</td>\n      <td>27.194973</td>\n      <td>235</td>\n      <td>1</td>\n      <td>7</td>\n      <td>Canada</td>\n      <td>North America</td>\n      <td>Northern Hemisphere</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>BNI9906</td>\n      <td>21</td>\n      <td>Female</td>\n      <td>324</td>\n      <td>174/99</td>\n      <td>72</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>9.463426</td>\n      <td>235282</td>\n      <td>28.176571</td>\n      <td>587</td>\n      <td>4</td>\n      <td>4</td>\n      <td>France</td>\n      <td>Europe</td>\n      <td>Northern Hemisphere</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>JLN3497</td>\n      <td>84</td>\n      <td>Male</td>\n      <td>383</td>\n      <td>163/100</td>\n      <td>73</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>...</td>\n      <td>7.648981</td>\n      <td>125640</td>\n      <td>36.464704</td>\n      <td>378</td>\n      <td>3</td>\n      <td>4</td>\n      <td>Canada</td>\n      <td>North America</td>\n      <td>Northern Hemisphere</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>GFO8847</td>\n      <td>66</td>\n      <td>Male</td>\n      <td>318</td>\n      <td>91/88</td>\n      <td>93</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>...</td>\n      <td>1.514821</td>\n      <td>160555</td>\n      <td>21.809144</td>\n      <td>231</td>\n      <td>1</td>\n      <td>5</td>\n      <td>Thailand</td>\n      <td>Asia</td>\n      <td>Northern Hemisphere</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 26 columns</p>\n</div>"},"metadata":{}}],"execution_count":3},{"cell_type":"code","source":"# Drop irrelevant columns (if present)\ndf.drop(columns=[col for col in ['Patient ID', 'Country', 'Continent', 'Hemisphere'] if col in df.columns], inplace=True)\n\n# Encode 'Sex' to binary\nif 'Sex' in df.columns:\n    df['Sex'] = df['Sex'].map({'Male': 1, 'Female': 0})\n\n# Split Blood Pressure into two numeric features\nif 'Blood Pressure' in df.columns:\n    bp_split = df['Blood Pressure'].str.split('/', expand=True)\n    df['Systolic_BP'] = pd.to_numeric(bp_split[0], errors='coerce')\n    df['Diastolic_BP'] = pd.to_numeric(bp_split[1], errors='coerce')\n    df.drop('Blood Pressure', axis=1, inplace=True)\n\n# Label encode remaining object columns\nlabel_cols = df.select_dtypes(include='object').columns\nle = LabelEncoder()\nfor col in label_cols:\n    df[col] = le.fit_transform(df[col].astype(str))\n\n# Fill any remaining NaNs with median\ndf.fillna(df.median(numeric_only=True), inplace=True)\n\n# Final check\nprint(\"Final shape:\", df.shape)\ndf.head()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-04T12:56:27.251363Z","iopub.execute_input":"2025-07-04T12:56:27.251712Z","iopub.status.idle":"2025-07-04T12:56:27.309620Z","shell.execute_reply.started":"2025-07-04T12:56:27.251682Z","shell.execute_reply":"2025-07-04T12:56:27.308867Z"}},"outputs":[{"name":"stdout","text":"Final shape: (8763, 23)\n","output_type":"stream"},{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"   Age  Sex  Cholesterol  Heart Rate  Diabetes  Family History  Smoking  \\\n0   67    1          208          72         0               0        1   \n1   21    1          389          98         1               1        1   \n2   21    0          324          72         1               0        0   \n3   84    1          383          73         1               1        1   \n4   66    1          318          93         1               1        1   \n\n   Obesity  Alcohol Consumption  Exercise Hours Per Week  ...  Stress Level  \\\n0        0                    0                 4.168189  ...             9   \n1        1                    1                 1.813242  ...             1   \n2        0                    0                 2.078353  ...             9   \n3        0                    1                 9.828130  ...             9   \n4        1                    0                 5.804299  ...             6   \n\n   Sedentary Hours Per Day  Income        BMI  Triglycerides  \\\n0                 6.615001  261404  31.251233            286   \n1                 4.963459  285768  27.194973            235   \n2                 9.463426  235282  28.176571            587   \n3                 7.648981  125640  36.464704            378   \n4                 1.514821  160555  21.809144            231   \n\n   Physical Activity Days Per Week  Sleep Hours Per Day  Heart Attack Risk  \\\n0                                0                    6                  0   \n1                                1                    7                  0   \n2                                4                    4                  0   \n3                                3                    4                  0   \n4                                1                    5                  0   \n\n   Systolic_BP  Diastolic_BP  \n0          158            88  \n1          165            93  \n2          174            99  \n3          163           100  \n4           91            88  \n\n[5 rows x 23 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Age</th>\n      <th>Sex</th>\n      <th>Cholesterol</th>\n      <th>Heart Rate</th>\n      <th>Diabetes</th>\n      <th>Family History</th>\n      <th>Smoking</th>\n      <th>Obesity</th>\n      <th>Alcohol Consumption</th>\n      <th>Exercise Hours Per Week</th>\n      <th>...</th>\n      <th>Stress Level</th>\n      <th>Sedentary Hours Per Day</th>\n      <th>Income</th>\n      <th>BMI</th>\n      <th>Triglycerides</th>\n      <th>Physical Activity Days Per Week</th>\n      <th>Sleep Hours Per Day</th>\n      <th>Heart Attack Risk</th>\n      <th>Systolic_BP</th>\n      <th>Diastolic_BP</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>67</td>\n      <td>1</td>\n      <td>208</td>\n      <td>72</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>4.168189</td>\n      <td>...</td>\n      <td>9</td>\n      <td>6.615001</td>\n      <td>261404</td>\n      <td>31.251233</td>\n      <td>286</td>\n      <td>0</td>\n      <td>6</td>\n      <td>0</td>\n      <td>158</td>\n      <td>88</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>21</td>\n      <td>1</td>\n      <td>389</td>\n      <td>98</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1.813242</td>\n      <td>...</td>\n      <td>1</td>\n      <td>4.963459</td>\n      <td>285768</td>\n      <td>27.194973</td>\n      <td>235</td>\n      <td>1</td>\n      <td>7</td>\n      <td>0</td>\n      <td>165</td>\n      <td>93</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>21</td>\n      <td>0</td>\n      <td>324</td>\n      <td>72</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2.078353</td>\n      <td>...</td>\n      <td>9</td>\n      <td>9.463426</td>\n      <td>235282</td>\n      <td>28.176571</td>\n      <td>587</td>\n      <td>4</td>\n      <td>4</td>\n      <td>0</td>\n      <td>174</td>\n      <td>99</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>84</td>\n      <td>1</td>\n      <td>383</td>\n      <td>73</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>9.828130</td>\n      <td>...</td>\n      <td>9</td>\n      <td>7.648981</td>\n      <td>125640</td>\n      <td>36.464704</td>\n      <td>378</td>\n      <td>3</td>\n      <td>4</td>\n      <td>0</td>\n      <td>163</td>\n      <td>100</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>66</td>\n      <td>1</td>\n      <td>318</td>\n      <td>93</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>5.804299</td>\n      <td>...</td>\n      <td>6</td>\n      <td>1.514821</td>\n      <td>160555</td>\n      <td>21.809144</td>\n      <td>231</td>\n      <td>1</td>\n      <td>5</td>\n      <td>0</td>\n      <td>91</td>\n      <td>88</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 23 columns</p>\n</div>"},"metadata":{}}],"execution_count":4},{"cell_type":"code","source":"# Separate features and target\nX = df.drop('Heart Attack Risk', axis=1)\ny = df['Heart Attack Risk']\n\n# Standardize features\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-04T12:56:27.312042Z","iopub.execute_input":"2025-07-04T12:56:27.312299Z","iopub.status.idle":"2025-07-04T12:56:27.332045Z","shell.execute_reply.started":"2025-07-04T12:56:27.312276Z","shell.execute_reply":"2025-07-04T12:56:27.331356Z"}},"outputs":[],"execution_count":5},{"cell_type":"code","source":"smote = SMOTE(random_state=42)\nX_bal, y_bal = smote.fit_resample(X_scaled, y)\n\nprint(\"Balanced class counts:\\n\", pd.Series(y_bal).value_counts())\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-04T12:56:27.333015Z","iopub.execute_input":"2025-07-04T12:56:27.333352Z","iopub.status.idle":"2025-07-04T12:56:27.403895Z","shell.execute_reply.started":"2025-07-04T12:56:27.333322Z","shell.execute_reply":"2025-07-04T12:56:27.403012Z"}},"outputs":[{"name":"stdout","text":"Balanced class counts:\n Heart Attack Risk\n0    5624\n1    5624\nName: count, dtype: int64\n","output_type":"stream"}],"execution_count":6},{"cell_type":"code","source":"X_train, X_test, y_train, y_test = train_test_split(\n    X_bal, y_bal, test_size=0.2, stratify=y_bal, random_state=42\n)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-04T12:56:27.404835Z","iopub.execute_input":"2025-07-04T12:56:27.405176Z","iopub.status.idle":"2025-07-04T12:56:27.417463Z","shell.execute_reply.started":"2025-07-04T12:56:27.405146Z","shell.execute_reply":"2025-07-04T12:56:27.416599Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"model = LogisticRegression(solver='liblinear', random_state=42)\nmodel.fit(X_train, y_train)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-04T12:56:27.418547Z","iopub.execute_input":"2025-07-04T12:56:27.418882Z","iopub.status.idle":"2025-07-04T12:56:27.446437Z","shell.execute_reply.started":"2025-07-04T12:56:27.418851Z","shell.execute_reply":"2025-07-04T12:56:27.445680Z"}},"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"LogisticRegression(random_state=42, solver='liblinear')","text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(random_state=42, solver=&#x27;liblinear&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(random_state=42, solver=&#x27;liblinear&#x27;)</pre></div></div></div></div></div>"},"metadata":{}}],"execution_count":8},{"cell_type":"code","source":"from lightgbm import LGBMClassifier\nmodel = LGBMClassifier(random_state=42)\nmodel.fit(X_train, y_train)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-04T12:57:27.709861Z","iopub.execute_input":"2025-07-04T12:57:27.710591Z","iopub.status.idle":"2025-07-04T12:57:29.678355Z","shell.execute_reply.started":"2025-07-04T12:57:27.710551Z","shell.execute_reply":"2025-07-04T12:57:29.677408Z"}},"outputs":[{"name":"stdout","text":"[LightGBM] [Info] Number of positive: 4499, number of negative: 4499\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000405 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 4778\n[LightGBM] [Info] Number of data points in the train set: 8998, number of used features: 22\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n","output_type":"stream"},{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"LGBMClassifier(random_state=42)","text/html":"<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LGBMClassifier(random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LGBMClassifier</label><div class=\"sk-toggleable__content\"><pre>LGBMClassifier(random_state=42)</pre></div></div></div></div></div>"},"metadata":{}}],"execution_count":10},{"cell_type":"code","source":"from sklearn.ensemble import RandomForestClassifier\n\nfrom sklearn.model_selection import GridSearchCV\n\nparam_grid = {\n    'n_estimators': [100, 200],\n    'max_depth': [10, 20, None],\n    'min_samples_split': [2, 5],\n    'min_samples_leaf': [1, 2],\n    'max_features': ['sqrt', 'log2']\n}\n\ngrid = GridSearchCV(\n    estimator=RandomForestClassifier(random_state=42),\n    param_grid=param_grid,\n    cv=3,\n    scoring='f1',\n    verbose=1,\n    n_jobs=-1\n)\n\ngrid.fit(X_train, y_train)\n\nbest_model = grid.best_estimator_\ny_pred_grid = best_model.predict(X_test)\n\n# Evaluate\nprint(\"Tuned Random Forest:\")\nprint(\"Accuracy:\", accuracy_score(y_test, y_pred_grid))\nprint(\"Precision:\", precision_score(y_test, y_pred_grid))\nprint(\"Recall:\", recall_score(y_test, y_pred_grid))\nprint(\"F1-score:\", f1_score(y_test, y_pred_grid))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-04T12:58:27.595423Z","iopub.execute_input":"2025-07-04T12:58:27.596337Z","iopub.status.idle":"2025-07-04T13:00:39.875329Z","shell.execute_reply.started":"2025-07-04T12:58:27.596310Z","shell.execute_reply":"2025-07-04T13:00:39.874244Z"}},"outputs":[{"name":"stdout","text":"Fitting 3 folds for each of 48 candidates, totalling 144 fits\nTuned Random Forest:\nAccuracy: 0.7435555555555555\nPrecision: 0.8277511961722488\nRecall: 0.6151111111111112\nF1-score: 0.7057623661397247\n","output_type":"stream"}],"execution_count":12}]}